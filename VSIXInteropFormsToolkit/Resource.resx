<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ADDIN_STATUS_GENERATED_ERROR_FULL" xml:space="preserve">
    <value>Error Creating InteropForm Wrapper Classes for Project {0}</value>
  </data>
  <data name="ADDIN_STATUS_GENERATED_ERROR1" xml:space="preserve">
    <value>Error Creating InteropForm Wrapper Classes</value>
  </data>
  <data name="ADDIN_STATUS_GENERATED_ERROR2" xml:space="preserve">
    <value>  for Project {0}</value>
  </data>
  <data name="ADDIN_STATUS_GENERATED_OK" xml:space="preserve">
    <value>InteropForm Wrapper Classes Generated</value>
  </data>
  <data name="ADDIN_STATUS_GENERATING" xml:space="preserve">
    <value>Generating InteropForm Wrapper Classes...</value>
  </data>
  <data name="AddinConnectErrMsg" xml:space="preserve">
    <value>There was a problem connecting to the Interop Forms Toolkit AddIn.  Error message was {0}</value>
  </data>
  <data name="COMMAND_DISPLAY_NAME" xml:space="preserve">
    <value>Generate InteropForm Wrapper Classes</value>
  </data>
  <data name="CommandBarsItemMenuBar" xml:space="preserve">
    <value>MenuBar</value>
  </data>
  <data name="CreateWrappersErrMsg" xml:space="preserve">
    <value>There was a problem creating InteropForm Wrapper Classes.  The error was {0}</value>
  </data>
  <data name="DISPLAY_CAPTION" xml:space="preserve">
    <value>InteropForm Wrapper Class Generator</value>
  </data>
  <data name="DOCUMENT_TYPE" xml:space="preserve">
    <value>{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}</value>
  </data>
  <data name="EVENT_ARGS_COMMENT1" xml:space="preserve">
    <value>This event exposes System.EventArgs as part of its signature.</value>
  </data>
  <data name="EVENT_ARGS_COMMENT2" xml:space="preserve">
    <value>Any dervied types have been cast down.</value>
  </data>
  <data name="EVENT_ARGS_COMMENT3" xml:space="preserve">
    <value>Be sure COM client references the Common Language Runtime Library (mscorlib.tlb) or library containing appropriate derived type.</value>
  </data>
  <data name="EventErrMsg" xml:space="preserve">
    <value>Event {0} will not be generated. Could not find delegate {1}.  Delegate must be explicitly</value>
  </data>
  <data name="EventErrMsg2" xml:space="preserve">
    <value>Type {0} is not supported. Event {1} will not be generated.</value>
  </data>
  <data name="FOLDER_TYPE" xml:space="preserve">
    <value>{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}</value>
  </data>
  <data name="InitMethodErrMsg" xml:space="preserve">
    <value>Type {0} is not supported. Initialize method for constructor with parameter {1}({2}) will not be generated.</value>
  </data>
  <data name="INTEROP_FORM_PROXY_FOLDER_NAME" xml:space="preserve">
    <value>InteropForm Wrapper Classes</value>
  </data>
  <data name="KeyBinding" xml:space="preserve">
    <value>Global::ctrl+shift+g</value>
  </data>
  <data name="LanguageCS" xml:space="preserve">
    <value>{B5E9BD34-6D3E-4B5D-925E-8A43B79820B4}</value>
  </data>
  <data name="LanguageVB" xml:space="preserve">
    <value>{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}</value>
  </data>
  <data name="LoadSupportedTypesErrMsg" xml:space="preserve">
    <value>Error creating Add-In: could not load supported types for generated code.  </value>
  </data>
  <data name="MethodErrMsg1" xml:space="preserve">
    <value>Type {0} is not supported. Method {1} will not be generated.</value>
  </data>
  <data name="MethodErrMsg2" xml:space="preserve">
    <value>Type {0} is not supported. Method {1} will not be generated.</value>
  </data>
  <data name="ParamPropertyErrMsg" xml:space="preserve">
    <value>Parameterized properties are not supported. Property {0} will not be generated.</value>
  </data>
  <data name="PropertyErrMsg" xml:space="preserve">
    <value>Type {0} is not supported. Property {1} will not be generated.</value>
  </data>
  <data name="QueryStatusErrMsg" xml:space="preserve">
    <value>There was a problem Querying Status of AddIn.  The error was {0}</value>
  </data>
  <data name="ToolsMenuNameDefault" xml:space="preserve">
    <value>Tools</value>
  </data>
</root>